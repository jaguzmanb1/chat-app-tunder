package handlers

import (
	"authentication-api/data"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/hashicorp/go-hclog"
)

var signKey = []byte(os.Getenv("secretAuthKey"))

// Auth describes a Auth http handler object
type Auth struct {
	l hclog.Logger
	u *data.UserService
	v *data.Validation
}

// KeyUser used for the middleware to pass data trought request context
type KeyUser struct{}

// GenericError is a generic error message returned by a server
type GenericError struct {
	Message string `json:"message"`
}

// Token is the token structure generated by the the server
type Token struct {
	Message string `json:"message"`
}

// ValidationError is a collection of validation error messages
type ValidationError struct {
	Messages []string `json:"messages"`
}

// New creates a new instance of an auth handler
func New(l hclog.Logger, u *data.UserService, v *data.Validation) *Auth {
	l.Debug("[New] Creating new instance of an Auth handler")

	return &Auth{l, u, v}
}

// GenerateToken a token
func (h *Auth) GenerateToken(user *data.UserSignin) (string, error) {
	h.l.Info("[GenerateToken] Generating token for user", "phone", user.Phone)

	token := jwt.New(jwt.SigningMethodHS256)
	claims := token.Claims.(jwt.MapClaims)

	claims["authorized"] = true
	claims["phone"] = user.Phone
	claims["exp"] = time.Now().Add(time.Minute * 30).Unix()
	claims["rol"] = user.Rol

	tokenString, err := token.SignedString(signKey)

	if err != nil {
		return "", err
	}

	return tokenString, nil
}
